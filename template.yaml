AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.

Parameters:
  # specify an existing S3 bucket with some objects stored
  SourceBucket:
    Type: String
    Description: Name of the existing source S3 bucket with files.
    
Resources:
  # option 1 - resources for Go Lambda using the S3 path as input
  # for this scenario, the Lambda function needs to have IAM access to the bucket

  # queue - create sqs queue
  S3PathSQS:
    Type: AWS::SQS::Queue

  # table - create a dynamodb table to store results
  S3PathTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
      - AttributeName: Fileurl
        AttributeType: S
      - AttributeName: Md5
        AttributeType: S
      KeySchema:
      - AttributeName: Fileurl
        KeyType: HASH
      - AttributeName: Md5
        KeyType: RANGE  
      BillingMode: PAY_PER_REQUEST

  # receiver - create s3 path lambda that receives sqs messages
  S3PathLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3path/
      Handler: s3path
      Tracing: Active
      Runtime: go1.x
      Events:
        S3PathEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt S3PathSQS.Arn
            BatchSize: 10
            MaximumRetryAttempts: 0
      Description: 'Lambda function which processes S3 paths submitted over SQS'
      MemorySize: 256
      Timeout: 5
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:Get*'
              Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
        - DynamoDBCrudPolicy:
            TableName: !Ref S3PathTable
      Environment:
        Variables:
          s3bucket: !Ref SourceBucket
          ddbtable: !Ref S3PathTable
          
  # sender - create s3 path load generator lambda
  S3PathLoadgenLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3path-loadgen/
      Handler: s3path-loadgen
      Tracing: Active
      Runtime: go1.x
      Description: 'Lambda function which generates S3 paths submitted to SQS'
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:List*'
              Resource: !Sub "arn:aws:s3:::${SourceBucket}"
        - SQSSendMessagePolicy:
            QueueName: !GetAtt S3PathSQS.QueueName
      Environment:
        Variables:
          sqsqueue: !Ref S3PathSQS
          s3bucket: !Ref SourceBucket

  # option 2 - resources for Go Lambda using a signed S3 URL
  # for this scenario, the Lambda function needs to IAM access to the bucket, so it may be easier to use cross account

  # queue - create sqs queue
  SignedUrlSQS:
    Type: AWS::SQS::Queue

  # table - create a dynamodb table to store results
  SignedURLTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
      - AttributeName: Fileurl
        AttributeType: S
      - AttributeName: Md5
        AttributeType: S
      KeySchema:
      - AttributeName: Fileurl
        KeyType: HASH
      - AttributeName: Md5
        KeyType: RANGE  
      BillingMode: PAY_PER_REQUEST

  # receiver - create s3 signed url lambda that receives sqs messages
  SignedUrlLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3signedurl/
      Handler: s3signedurl
      Tracing: Active
      Runtime: go1.x
      Events:
        SignedUrlEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SignedUrlSQS.Arn
            BatchSize: 10
            MaximumRetryAttempts: 0
      Description: 'Lambda function which retrieves S3 signed URLs submitted over SQS using a HTTP GET request'
      MemorySize: 256
      Timeout: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref S3PathTable
      Environment:
        Variables:
          ddbtable: !Ref SignedURLTable
        
  # sender - create a s3 signed url lambda load generator lambda
  SignedUrlLoadgenLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3signedurl-loadgen/
      Handler: s3signedurl-loadgen
      Tracing: Active
      Runtime: go1.x
      Description: 'Lambda function which generates signed S3 URLs and submits them to SQS'
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:List*'
                - 's3:Get*'
              Resource: !Sub "arn:aws:s3:::${SourceBucket}"
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SignedUrlSQS.QueueName
      Environment:
        Variables:
          sqsqueue: !Ref SignedUrlSQS
          s3bucket: !Ref SourceBucket
